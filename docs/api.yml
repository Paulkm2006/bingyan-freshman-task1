openapi: 3.0.0
info:
  title: User management, authentication and authorization API
  version: 1.0.0
paths:
  /user:
    post:
      summary: Create a new user
      parameters: 
        - name: code
          description: Email verification code
          in: query
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  required: true
                  type: string
                password:
                  required: true
                  type: string
                email:
                  required: false
                  type: string
                nickname:
                  required: false
                  type: string
      responses:
        '201':
          description: User created
        '409':
          description: User already exists
        '400':
          description: Invalid input
    get:
      summary: Get user info
      description: Get info of a user whether by username or id
      security:
        - bearerAuth: [user,admin]
      parameters:
        - name: username
          in: query
          required: false
          schema:
            type: string
        - name: id
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: The specified user info
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  msg:
                    type: string
                    description: Always empty
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
                      password:
                        type: string
                        description: Always empty
                      email:
                        type: string
                      nickname:
                        type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
    delete:
      summary: Delete a user
      description: Delete a user by id
      security:
        - bearerAuth: [admin]
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
  /user/token:
    post:
      summary: Get access token for user
      description: Get access token by username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  required: true
                  type: string
                password:
                  required: true
                  type: string
      responses:
        '200':
          description: Access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  msg:
                    type: string
                    description: Always empty
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      expires_in:
                        type: integer
        '401':
          description: Invalid username or password
        '400':
          description: Invalid input
  /verify:
    get:
      summary: Get email verification code
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
  /post:
    post:
      summary: Create a new post
      security:
        - bearerAuth: [user]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  required: true
                content:
                  type: string
                  required: true
      responses:
        '200':
          description: Post created successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    get:
      summary: Get all posts with pagination
      security:
        - bearerAuth: [user]
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
        - name: pageSize
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of posts
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      summary: Delete a post
      security:
        - bearerAuth: [user, admin]
      parameters:
        - name: pid
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Not authorized to delete this post

  /post/pid:
    get:
      summary: Get post by ID
      security:
        - bearerAuth: [user]
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post details
        '404':
          description: Post not found

  /post/uid:
    get:
      summary: Get posts by user ID
      security:
        - bearerAuth: [user]
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
        - name: page
          in: query
          required: true
          schema:
            type: integer
        - name: pageSize
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of posts by user

  /comment:
    post:
      summary: Create a new comment
      security:
        - bearerAuth: [user]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  required: true
                pid:
                  type: integer
                  required: true
      responses:
        '200':
          description: Comment created successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      summary: Delete a comment
      security:
        - bearerAuth: [user]
      parameters:
        - name: cid
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Comment deleted successfully
        '403':
          description: Not authorized to delete this comment

  /comment/pid:
    get:
      summary: Get comments by post ID
      security:
        - bearerAuth: [user]
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
        - name: page
          in: query
          required: true
          schema:
            type: integer
        - name: pageSize
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of comments for post

  /comment/uid:
    get:
      summary: Get comments by user ID
      security:
        - bearerAuth: [user]
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
        - name: page
          in: query
          required: true
          schema:
            type: integer
        - name: pageSize
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of comments by user

  /like:
    post:
      summary: Like a post
      security:
        - bearerAuth: [user]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pid:
                  type: integer
                  required: true
      responses:
        '200':
          description: Post liked successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      summary: Unlike a post
      security:
        - bearerAuth: [user]
      parameters:
        - name: pid
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Like removed successfully
        '404':
          description: Like not found

  /like/pid:
    get:
      summary: Get likes by post ID
      security:
        - bearerAuth: [user]
      parameters:
        - name: pid
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of likes for post

  /like/uid:
    get:
      summary: Get likes by user ID
      security:
        - bearerAuth: [user]
      parameters:
        - name: uid
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of likes by user

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      scopes:
        user: User access
        admin: Admin access
  responses:
    UnauthorizedError:
      description: Access token is missing, invalid, expired or does not have the required permissions